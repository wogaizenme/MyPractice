package com.example.dependencies.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dependencies.greendao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Alias = new Property(1, String.class, "alias", false, "ALIAS");
        public final static Property Serial_number = new Property(2, String.class, "serial_number", false, "SERIAL_NUMBER");
        public final static Property Secret_key = new Property(3, String.class, "secret_key", false, "SECRET_KEY");
        public final static Property Security_password = new Property(4, String.class, "security_password", false, "SECURITY_PASSWORD");
        public final static Property Errors_number = new Property(5, int.class, "errors_number", false, "ERRORS_NUMBER");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ALIAS\" TEXT," + // 1: alias
                "\"SERIAL_NUMBER\" TEXT," + // 2: serial_number
                "\"SECRET_KEY\" TEXT," + // 3: secret_key
                "\"SECURITY_PASSWORD\" TEXT," + // 4: security_password
                "\"ERRORS_NUMBER\" INTEGER NOT NULL );"); // 5: errors_number
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(2, alias);
        }
 
        String serial_number = entity.getSerial_number();
        if (serial_number != null) {
            stmt.bindString(3, serial_number);
        }
 
        String secret_key = entity.getSecret_key();
        if (secret_key != null) {
            stmt.bindString(4, secret_key);
        }
 
        String security_password = entity.getSecurity_password();
        if (security_password != null) {
            stmt.bindString(5, security_password);
        }
        stmt.bindLong(6, entity.getErrors_number());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(2, alias);
        }
 
        String serial_number = entity.getSerial_number();
        if (serial_number != null) {
            stmt.bindString(3, serial_number);
        }
 
        String secret_key = entity.getSecret_key();
        if (secret_key != null) {
            stmt.bindString(4, secret_key);
        }
 
        String security_password = entity.getSecurity_password();
        if (security_password != null) {
            stmt.bindString(5, security_password);
        }
        stmt.bindLong(6, entity.getErrors_number());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alias
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serial_number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // secret_key
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // security_password
            cursor.getInt(offset + 5) // errors_number
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlias(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerial_number(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSecret_key(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSecurity_password(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setErrors_number(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
